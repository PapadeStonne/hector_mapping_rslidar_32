# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from youibot_msgs/InlemsSensor.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class InlemsSensor(genpy.Message):
  _md5sum = "ef63f873581f5bf47aeaac9885d8cb29"
  _type = "youibot_msgs/InlemsSensor"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

# type 0 STK001-0B / STK001-0A
float32[] server_STK

# type 1 STL001-0A
float32[] server_STL

# type 2 SGC001-1B
float32[] server_seal_co2

# type 3 SGC001-1A
float32[] server_non_seal_co2

# type 4 O2
float32[] server_O2

# type 5 SE6IN1-0A

float32 server_6_temperature_type5
float32 server_6_humidity_type5
float32 server_6_pressure_type5
float32 server_6_o2_type5
float32 server_6_tvoc_type5
float32 server_6_pm25_type5

# type 6

# type 7 gate signal
int8[] server_gate

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','server_STK','server_STL','server_seal_co2','server_non_seal_co2','server_O2','server_6_temperature_type5','server_6_humidity_type5','server_6_pressure_type5','server_6_o2_type5','server_6_tvoc_type5','server_6_pm25_type5','server_gate']
  _slot_types = ['std_msgs/Header','float32[]','float32[]','float32[]','float32[]','float32[]','float32','float32','float32','float32','float32','float32','int8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,server_STK,server_STL,server_seal_co2,server_non_seal_co2,server_O2,server_6_temperature_type5,server_6_humidity_type5,server_6_pressure_type5,server_6_o2_type5,server_6_tvoc_type5,server_6_pm25_type5,server_gate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InlemsSensor, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.server_STK is None:
        self.server_STK = []
      if self.server_STL is None:
        self.server_STL = []
      if self.server_seal_co2 is None:
        self.server_seal_co2 = []
      if self.server_non_seal_co2 is None:
        self.server_non_seal_co2 = []
      if self.server_O2 is None:
        self.server_O2 = []
      if self.server_6_temperature_type5 is None:
        self.server_6_temperature_type5 = 0.
      if self.server_6_humidity_type5 is None:
        self.server_6_humidity_type5 = 0.
      if self.server_6_pressure_type5 is None:
        self.server_6_pressure_type5 = 0.
      if self.server_6_o2_type5 is None:
        self.server_6_o2_type5 = 0.
      if self.server_6_tvoc_type5 is None:
        self.server_6_tvoc_type5 = 0.
      if self.server_6_pm25_type5 is None:
        self.server_6_pm25_type5 = 0.
      if self.server_gate is None:
        self.server_gate = []
    else:
      self.header = std_msgs.msg.Header()
      self.server_STK = []
      self.server_STL = []
      self.server_seal_co2 = []
      self.server_non_seal_co2 = []
      self.server_O2 = []
      self.server_6_temperature_type5 = 0.
      self.server_6_humidity_type5 = 0.
      self.server_6_pressure_type5 = 0.
      self.server_6_o2_type5 = 0.
      self.server_6_tvoc_type5 = 0.
      self.server_6_pm25_type5 = 0.
      self.server_gate = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.server_STK)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.server_STK))
      length = len(self.server_STL)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.server_STL))
      length = len(self.server_seal_co2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.server_seal_co2))
      length = len(self.server_non_seal_co2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.server_non_seal_co2))
      length = len(self.server_O2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.server_O2))
      _x = self
      buff.write(_get_struct_6f().pack(_x.server_6_temperature_type5, _x.server_6_humidity_type5, _x.server_6_pressure_type5, _x.server_6_o2_type5, _x.server_6_tvoc_type5, _x.server_6_pm25_type5))
      length = len(self.server_gate)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.server_gate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.server_STK = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.server_STL = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.server_seal_co2 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.server_non_seal_co2 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.server_O2 = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 24
      (_x.server_6_temperature_type5, _x.server_6_humidity_type5, _x.server_6_pressure_type5, _x.server_6_o2_type5, _x.server_6_tvoc_type5, _x.server_6_pm25_type5,) = _get_struct_6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.server_gate = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.server_STK)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.server_STK.tostring())
      length = len(self.server_STL)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.server_STL.tostring())
      length = len(self.server_seal_co2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.server_seal_co2.tostring())
      length = len(self.server_non_seal_co2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.server_non_seal_co2.tostring())
      length = len(self.server_O2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.server_O2.tostring())
      _x = self
      buff.write(_get_struct_6f().pack(_x.server_6_temperature_type5, _x.server_6_humidity_type5, _x.server_6_pressure_type5, _x.server_6_o2_type5, _x.server_6_tvoc_type5, _x.server_6_pm25_type5))
      length = len(self.server_gate)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.server_gate.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.server_STK = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.server_STL = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.server_seal_co2 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.server_non_seal_co2 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.server_O2 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 24
      (_x.server_6_temperature_type5, _x.server_6_humidity_type5, _x.server_6_pressure_type5, _x.server_6_o2_type5, _x.server_6_tvoc_type5, _x.server_6_pm25_type5,) = _get_struct_6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.server_gate = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
