# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from youibot_msgs/Battery.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Battery(genpy.Message):
  _md5sum = "0ad55ce41d78c7d39abb1e4bed3c155f"
  _type = "youibot_msgs/Battery"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# This is a message to hold data from an BMS

Header header
int16[] vcells # mv
int16[] temperatures
int64 voltage  # mv Total voltage of the cell
int64 curcadc  # mA Real-time current value is returned and CADC current is collected with an accuracy of 16bit
int64 fcc      # mAH System full capacity
int64 rc       # mAH Returns the battery pack's current remaining power
int16 rsoc     # %  Returns the percentage of battery charge remaining in the battery pack
int16 ischarging  # 1: is charging ; 0: not charging
int16 isdischarging # 1: is discharging; 0: not discharging

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','vcells','temperatures','voltage','curcadc','fcc','rc','rsoc','ischarging','isdischarging']
  _slot_types = ['std_msgs/Header','int16[]','int16[]','int64','int64','int64','int64','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,vcells,temperatures,voltage,curcadc,fcc,rc,rsoc,ischarging,isdischarging

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Battery, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vcells is None:
        self.vcells = []
      if self.temperatures is None:
        self.temperatures = []
      if self.voltage is None:
        self.voltage = 0
      if self.curcadc is None:
        self.curcadc = 0
      if self.fcc is None:
        self.fcc = 0
      if self.rc is None:
        self.rc = 0
      if self.rsoc is None:
        self.rsoc = 0
      if self.ischarging is None:
        self.ischarging = 0
      if self.isdischarging is None:
        self.isdischarging = 0
    else:
      self.header = std_msgs.msg.Header()
      self.vcells = []
      self.temperatures = []
      self.voltage = 0
      self.curcadc = 0
      self.fcc = 0
      self.rc = 0
      self.rsoc = 0
      self.ischarging = 0
      self.isdischarging = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.vcells)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.pack(pattern, *self.vcells))
      length = len(self.temperatures)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.pack(pattern, *self.temperatures))
      _x = self
      buff.write(_get_struct_4q3h().pack(_x.voltage, _x.curcadc, _x.fcc, _x.rc, _x.rsoc, _x.ischarging, _x.isdischarging))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.vcells = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.temperatures = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 38
      (_x.voltage, _x.curcadc, _x.fcc, _x.rc, _x.rsoc, _x.ischarging, _x.isdischarging,) = _get_struct_4q3h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.vcells)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.vcells.tostring())
      length = len(self.temperatures)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.temperatures.tostring())
      _x = self
      buff.write(_get_struct_4q3h().pack(_x.voltage, _x.curcadc, _x.fcc, _x.rc, _x.rsoc, _x.ischarging, _x.isdischarging))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.vcells = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.temperatures = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      _x = self
      start = end
      end += 38
      (_x.voltage, _x.curcadc, _x.fcc, _x.rc, _x.rsoc, _x.ischarging, _x.isdischarging,) = _get_struct_4q3h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4q3h = None
def _get_struct_4q3h():
    global _struct_4q3h
    if _struct_4q3h is None:
        _struct_4q3h = struct.Struct("<4q3h")
    return _struct_4q3h
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
