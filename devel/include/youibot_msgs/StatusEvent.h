// Generated by gencpp from file youibot_msgs/StatusEvent.msg
// DO NOT EDIT!


#ifndef YOUIBOT_MSGS_MESSAGE_STATUSEVENT_H
#define YOUIBOT_MSGS_MESSAGE_STATUSEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace youibot_msgs
{
template <class ContainerAllocator>
struct StatusEvent_
{
  typedef StatusEvent_<ContainerAllocator> Type;

  StatusEvent_()
    : header()
    , Msg_Timeout(0)
    , Kinco_Alert(0)
    , Front_Bumper(0)
    , Back_Bumper(0)
    , Button_Stop(0)
    , Wlan_Stop(0)
    , Net_Stop(0)
    , powerStatus(0)
    , Audio_Alert(0)  {
    }
  StatusEvent_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Msg_Timeout(0)
    , Kinco_Alert(0)
    , Front_Bumper(0)
    , Back_Bumper(0)
    , Button_Stop(0)
    , Wlan_Stop(0)
    , Net_Stop(0)
    , powerStatus(0)
    , Audio_Alert(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _Msg_Timeout_type;
  _Msg_Timeout_type Msg_Timeout;

   typedef uint8_t _Kinco_Alert_type;
  _Kinco_Alert_type Kinco_Alert;

   typedef uint8_t _Front_Bumper_type;
  _Front_Bumper_type Front_Bumper;

   typedef uint8_t _Back_Bumper_type;
  _Back_Bumper_type Back_Bumper;

   typedef uint8_t _Button_Stop_type;
  _Button_Stop_type Button_Stop;

   typedef uint8_t _Wlan_Stop_type;
  _Wlan_Stop_type Wlan_Stop;

   typedef uint8_t _Net_Stop_type;
  _Net_Stop_type Net_Stop;

   typedef uint8_t _powerStatus_type;
  _powerStatus_type powerStatus;

   typedef uint8_t _Audio_Alert_type;
  _Audio_Alert_type Audio_Alert;



  enum {
    ERROR = 1u,
    NORMAL = 0u,
  };


  typedef boost::shared_ptr< ::youibot_msgs::StatusEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::youibot_msgs::StatusEvent_<ContainerAllocator> const> ConstPtr;

}; // struct StatusEvent_

typedef ::youibot_msgs::StatusEvent_<std::allocator<void> > StatusEvent;

typedef boost::shared_ptr< ::youibot_msgs::StatusEvent > StatusEventPtr;
typedef boost::shared_ptr< ::youibot_msgs::StatusEvent const> StatusEventConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::youibot_msgs::StatusEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::youibot_msgs::StatusEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace youibot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'youibot_msgs': ['/home/zjq/VLP_ws/src/youibot_msgs/msg', '/home/zjq/VLP_ws/devel/share/youibot_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::youibot_msgs::StatusEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::youibot_msgs::StatusEvent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::youibot_msgs::StatusEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::youibot_msgs::StatusEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::youibot_msgs::StatusEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::youibot_msgs::StatusEvent_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::youibot_msgs::StatusEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1bbf73ac587662abfa23af50085fd630";
  }

  static const char* value(const ::youibot_msgs::StatusEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1bbf73ac587662abULL;
  static const uint64_t static_value2 = 0xfa23af50085fd630ULL;
};

template<class ContainerAllocator>
struct DataType< ::youibot_msgs::StatusEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "youibot_msgs/StatusEvent";
  }

  static const char* value(const ::youibot_msgs::StatusEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::youibot_msgs::StatusEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "###### MESSAGE ######\n\
\n\
Header header\n\
\n\
uint8 ERROR  = 1\n\
uint8 NORMAL = 0\n\
\n\
# 心跳报文超时\n\
uint8 Msg_Timeout\n\
# 驱动器报错\n\
uint8 Kinco_Alert\n\
# 前保险杠碰撞\n\
uint8 Front_Bumper\n\
# 后保险杠碰撞\n\
uint8 Back_Bumper\n\
# 按钮急停\n\
uint8 Button_Stop\n\
# 无线急停\n\
uint8 Wlan_Stop\n\
# 网络急停\n\
uint8 Net_Stop\n\
# 电池报错\n\
uint8 powerStatus\n\
# 语音报错\n\
uint8 Audio_Alert\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::youibot_msgs::StatusEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::youibot_msgs::StatusEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Msg_Timeout);
      stream.next(m.Kinco_Alert);
      stream.next(m.Front_Bumper);
      stream.next(m.Back_Bumper);
      stream.next(m.Button_Stop);
      stream.next(m.Wlan_Stop);
      stream.next(m.Net_Stop);
      stream.next(m.powerStatus);
      stream.next(m.Audio_Alert);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StatusEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::youibot_msgs::StatusEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::youibot_msgs::StatusEvent_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Msg_Timeout: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Msg_Timeout);
    s << indent << "Kinco_Alert: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Kinco_Alert);
    s << indent << "Front_Bumper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Front_Bumper);
    s << indent << "Back_Bumper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Back_Bumper);
    s << indent << "Button_Stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Button_Stop);
    s << indent << "Wlan_Stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Wlan_Stop);
    s << indent << "Net_Stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Net_Stop);
    s << indent << "powerStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.powerStatus);
    s << indent << "Audio_Alert: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Audio_Alert);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOUIBOT_MSGS_MESSAGE_STATUSEVENT_H
