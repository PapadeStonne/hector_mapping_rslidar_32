// Generated by gencpp from file youibot_msgs/HandshakeEvent.msg
// DO NOT EDIT!


#ifndef YOUIBOT_MSGS_MESSAGE_HANDSHAKEEVENT_H
#define YOUIBOT_MSGS_MESSAGE_HANDSHAKEEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace youibot_msgs
{
template <class ContainerAllocator>
struct HandshakeEvent_
{
  typedef HandshakeEvent_<ContainerAllocator> Type;

  HandshakeEvent_()
    : header()
    , stx_error(0)
    , id_number_error(0)
    , etx_error(0)
    , bytestream_overnum_error(0)
    , bytestream_size_error(0)
    , crc_check_error(0)  {
    }
  HandshakeEvent_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , stx_error(0)
    , id_number_error(0)
    , etx_error(0)
    , bytestream_overnum_error(0)
    , bytestream_size_error(0)
    , crc_check_error(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _stx_error_type;
  _stx_error_type stx_error;

   typedef uint8_t _id_number_error_type;
  _id_number_error_type id_number_error;

   typedef uint8_t _etx_error_type;
  _etx_error_type etx_error;

   typedef uint8_t _bytestream_overnum_error_type;
  _bytestream_overnum_error_type bytestream_overnum_error;

   typedef uint8_t _bytestream_size_error_type;
  _bytestream_size_error_type bytestream_size_error;

   typedef uint8_t _crc_check_error_type;
  _crc_check_error_type crc_check_error;





  typedef boost::shared_ptr< ::youibot_msgs::HandshakeEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::youibot_msgs::HandshakeEvent_<ContainerAllocator> const> ConstPtr;

}; // struct HandshakeEvent_

typedef ::youibot_msgs::HandshakeEvent_<std::allocator<void> > HandshakeEvent;

typedef boost::shared_ptr< ::youibot_msgs::HandshakeEvent > HandshakeEventPtr;
typedef boost::shared_ptr< ::youibot_msgs::HandshakeEvent const> HandshakeEventConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::youibot_msgs::HandshakeEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::youibot_msgs::HandshakeEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace youibot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'youibot_msgs': ['/home/zjq/VLP_ws/src/youibot_msgs/msg', '/home/zjq/VLP_ws/devel/share/youibot_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::youibot_msgs::HandshakeEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::youibot_msgs::HandshakeEvent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::youibot_msgs::HandshakeEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::youibot_msgs::HandshakeEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::youibot_msgs::HandshakeEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::youibot_msgs::HandshakeEvent_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::youibot_msgs::HandshakeEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad367238e15a313e6cf8d3702e138416";
  }

  static const char* value(const ::youibot_msgs::HandshakeEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad367238e15a313eULL;
  static const uint64_t static_value2 = 0x6cf8d3702e138416ULL;
};

template<class ContainerAllocator>
struct DataType< ::youibot_msgs::HandshakeEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "youibot_msgs/HandshakeEvent";
  }

  static const char* value(const ::youibot_msgs::HandshakeEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::youibot_msgs::HandshakeEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
###### MESSAGE ######\n\
\n\
Header header\n\
# stx包头错误\n\
uint8 stx_error\n\
# ID站号错误\n\
uint8 id_number_error\n\
# etx包尾错误\n\
uint8 etx_error\n\
# 数据包溢出\n\
uint8 bytestream_overnum_error\n\
# 数据包数据个数错误\n\
uint8 bytestream_size_error\n\
# crc校验错误\n\
uint8 crc_check_error\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::youibot_msgs::HandshakeEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::youibot_msgs::HandshakeEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.stx_error);
      stream.next(m.id_number_error);
      stream.next(m.etx_error);
      stream.next(m.bytestream_overnum_error);
      stream.next(m.bytestream_size_error);
      stream.next(m.crc_check_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HandshakeEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::youibot_msgs::HandshakeEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::youibot_msgs::HandshakeEvent_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "stx_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stx_error);
    s << indent << "id_number_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id_number_error);
    s << indent << "etx_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.etx_error);
    s << indent << "bytestream_overnum_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bytestream_overnum_error);
    s << indent << "bytestream_size_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bytestream_size_error);
    s << indent << "crc_check_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.crc_check_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOUIBOT_MSGS_MESSAGE_HANDSHAKEEVENT_H
