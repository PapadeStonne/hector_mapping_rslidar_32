// Generated by gencpp from file youibot_msgs/Gas.msg
// DO NOT EDIT!


#ifndef YOUIBOT_MSGS_MESSAGE_GAS_H
#define YOUIBOT_MSGS_MESSAGE_GAS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace youibot_msgs
{
template <class ContainerAllocator>
struct Gas_
{
  typedef Gas_<ContainerAllocator> Type;

  Gas_()
    : header()
    , names()
    , name_string()
    , concentrations()
    , status()
    , units()
    , unit_string()  {
    }
  Gas_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , names(_alloc)
    , name_string(_alloc)
    , concentrations(_alloc)
    , status(_alloc)
    , units(_alloc)
    , unit_string(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _names_type;
  _names_type names;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_string_type;
  _name_string_type name_string;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _concentrations_type;
  _concentrations_type concentrations;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _status_type;
  _status_type status;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _units_type;
  _units_type units;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _unit_string_type;
  _unit_string_type unit_string;



  enum {
    H2S = 9u,
    CO = 2u,
    CH2O = 34u,
    EX = 1u,
    NORMAL = 0u,
    LOWALERT = 1u,
    HIGHALERT = 2u,
    CONTACKERROR = 4u,
    SENSORERROR = 6u,
    LEL = 0u,
    VOL = 1u,
    PPM = 2u,
    PPB = 3u,
  };


  typedef boost::shared_ptr< ::youibot_msgs::Gas_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::youibot_msgs::Gas_<ContainerAllocator> const> ConstPtr;

}; // struct Gas_

typedef ::youibot_msgs::Gas_<std::allocator<void> > Gas;

typedef boost::shared_ptr< ::youibot_msgs::Gas > GasPtr;
typedef boost::shared_ptr< ::youibot_msgs::Gas const> GasConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::youibot_msgs::Gas_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::youibot_msgs::Gas_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace youibot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'youibot_msgs': ['/home/zjq/VLP_ws/src/youibot_msgs/msg', '/home/zjq/VLP_ws/devel/share/youibot_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::youibot_msgs::Gas_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::youibot_msgs::Gas_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::youibot_msgs::Gas_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::youibot_msgs::Gas_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::youibot_msgs::Gas_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::youibot_msgs::Gas_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::youibot_msgs::Gas_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b1599944d79d666573b544fd95fdc70";
  }

  static const char* value(const ::youibot_msgs::Gas_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b1599944d79d666ULL;
  static const uint64_t static_value2 = 0x573b544fd95fdc70ULL;
};

template<class ContainerAllocator>
struct DataType< ::youibot_msgs::Gas_<ContainerAllocator> >
{
  static const char* value()
  {
    return "youibot_msgs/Gas";
  }

  static const char* value(const ::youibot_msgs::Gas_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::youibot_msgs::Gas_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
# the kind of gas\n\
uint8 H2S = 9 # 0x09\n\
uint8 CO  = 2 # 0x02\n\
uint8 CH2O = 34 # 0x22\n\
uint8 EX  = 1 # 0x01\n\
\n\
# the status of gas data\n\
uint8 NORMAL = 0 # 0x00\n\
uint8 LOWALERT = 1 # 0x01\n\
uint8 HIGHALERT = 2 # 0x02\n\
uint8 CONTACKERROR = 4 # 0x04\n\
uint8 SENSORERROR = 6 # 0x06\n\
\n\
# the unit of gas \n\
uint8 LEL = 0 # 0x00\n\
uint8 VOL = 1 # 0x01\n\
uint8 PPM = 2 # 0x02\n\
uint8 PPB = 3 # 0x03\n\
\n\
uint8[] names  # the name of the variety of gases\n\
string[] name_string\n\
float64[] concentrations # the concentration of every kind of gas \n\
uint8[] status\n\
uint8[] units\n\
string[] unit_string\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::youibot_msgs::Gas_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::youibot_msgs::Gas_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.names);
      stream.next(m.name_string);
      stream.next(m.concentrations);
      stream.next(m.status);
      stream.next(m.units);
      stream.next(m.unit_string);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gas_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::youibot_msgs::Gas_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::youibot_msgs::Gas_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "names[]" << std::endl;
    for (size_t i = 0; i < v.names.size(); ++i)
    {
      s << indent << "  names[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.names[i]);
    }
    s << indent << "name_string[]" << std::endl;
    for (size_t i = 0; i < v.name_string.size(); ++i)
    {
      s << indent << "  name_string[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name_string[i]);
    }
    s << indent << "concentrations[]" << std::endl;
    for (size_t i = 0; i < v.concentrations.size(); ++i)
    {
      s << indent << "  concentrations[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.concentrations[i]);
    }
    s << indent << "status[]" << std::endl;
    for (size_t i = 0; i < v.status.size(); ++i)
    {
      s << indent << "  status[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.status[i]);
    }
    s << indent << "units[]" << std::endl;
    for (size_t i = 0; i < v.units.size(); ++i)
    {
      s << indent << "  units[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.units[i]);
    }
    s << indent << "unit_string[]" << std::endl;
    for (size_t i = 0; i < v.unit_string.size(); ++i)
    {
      s << indent << "  unit_string[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.unit_string[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOUIBOT_MSGS_MESSAGE_GAS_H
